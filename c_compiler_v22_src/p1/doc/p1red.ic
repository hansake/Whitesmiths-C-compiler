p1red.ic
.NM p1red.c reduces expressions
.FU
p1red.c performs compile time expression reduction
and machine indpendent tree rewriting
.LP
recodes is a table of deductions which is mapped
onto the operators found in p1type.c.
The codes represented are:
.DS
	0200	reduce right side of the expression
	0100	reduce left side of the expression
	0040	if left side is a term commute left and right
	0020	if right side is zero make the expression left side, exit
	0010	if right side is zero make the expression zero, exit
	0004	if right side is one make the expression left side, exit
	0002	if right side isn't constant exit
	0001	if left side isn't constant exit
.DE
.LP
recodes is used by function reduce.
The order of applying the codes to an expression is important.
An example:
.DS
	LTIMES is 0354
	1.	reduce right
	2.	reduce left
	3.	if left term commute
	4.	if right zero, expr is zero, exit
	5.	if right one, expr is one, exit
.DE
.LP
canadd does compile time addition and returns whether it could.
If both sides of the plus operator are integer,
have no operator and no refcount,
and either side has no name and no register, then a compile time add is done.
To do compile time addition, name, bias and register (idx) are added into the left side;
and the maximum type is set up to LONG (with PTRTO being considered less then LONG).
.LP
canmul does compile time multiplication on pure constants.
The type is set to maximum of long (not including PTRTO).
.LP
cansub does compile time subtraction.
If both left and right sides have the same name, the subtraction is done,
with the new name being null.
Also, if both left and right have the same idx,
idx is set to zero.
Type need not be set since either the right has only a bias
or has the same name and/or idx as left.
.LP
reduce does the expression reduction, using the recodes tables.
First, for any expression, reduce applies the recodes table entry
and does one or more of the eight reductions.
Then, and operator specific reduction is done;
note that for the switch controlling this, break causes
q to be set to l.
Among the reductions are:
.DS
	address of:		If left is a term, reduce ref count by one.
					If applied to indirection, remove both address of
					and indirection.
	cast:			Redundant casts are dropped.
	indirect:		if left is a term, add one to refcount.
					Thus for *i, i has a refcount of two.
					Else if left op is address of,
					remove both indirect and address of.
	query (?):		Reduce the middle term of the ternary.
					and if the test (left side) is constant,
					choose right or middle at complile time.
	plus:			If canadd left to right then copy up left.
					else regroup the tree if possible.
	minus:			If can subtract left from right,
					subtract and copy up left,
					else if right is a constant regroup the tree.
	times:			If can multiply, do it and copy up left,
					else regroup the tree.
.DE

.NM p1main.c declaration parsing
.FU
p1main.c controls declaration parsing and symbol table
manipulation for p1.
.LP
The files, flags, and symbol table definitions
are well documented in the code.
The m flag to p1 indicates each
structure and union will have its own private
member of structure table.
.LP
Comma separated lists are parsed in several contexts:
.DS
	while not list end
		get sc and ty
		if either
			progress = YES
		while decl
			progress = YES
			build symbol table
			if cant eat comma break
		if next not ; and no progress
			error
.DE
.LP
Cmptype compares the complete type of two symbol table entries.
.LP
Decsu parses structure-union declarations.
It uses the mechanism sketched above, although
it must also deal within with bit fields.
At a.b.boff the offset of the bit field is built.
At a.b.bsize the size of the bit field is built.
Also members of stuctures are placed into the
member of structure table,
and members and tags are associated.
.LP
dterm parses the declaration part of a term,
on a left to right basis.
dterm must recognize:
.DS
	*, (dterm), ident, (), []
.DE
.LP
gdecl parses a full declaration.
It gets a prototype symbol table,
and calls dterm to complete the job.
It then flips the ty and at fields,
so that it matches the way a C
declaration should look.
.LP
Going up a level,
gscty gets a storage class, modifier,
type, and builds the prototype symbol table entry.
And going up one more level,
to the very top,
main parses sequences of external, static,
ot typedef statements,
according to the structure for list walking
previously given.

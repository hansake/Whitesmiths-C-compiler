.NM p2main.c drive code generation
.FU
p2main.c contains the code for building and massaging the code graph
of each function.
Each graph consists of a list of headers, labels created in p1 to
implement control flow statements;
each label contains a count of the number of references to it
and points to a list of code entries for expressions, jumps, returns, etc.
.LP
Note that lookup invariably adds a header entry if there isn't one with
that label already.
For a well formed input file, this is always a good idea.
.LP
main directs the whole business.
It builds a graph for each function,
using gtbody, beginning and ending with a GFUNC
item in the input file.
Since gcode handles data initializers on the way in, and since main
emits no function body code until the end of the function, various
data declarations and literals inside functions get percolated out.
This permits all code to be steered to a single section, if necessary,
with no need to jump over data.
.LP
void and jcond are called to generate code sequences for expressions.
Other input codes call for various jumps or switches to be emitted,
or keep p2 advised of the current register usage and auto offset water mark.
.LP
When an entire code graph is built in memory, visit is called for each
header that must be visited (ISCASE) and hasn't yet been (!VISITED).
TOEMIT marks those headers whose code is reachable and hence
must be emitted.
With the order of code emission nailed down, shorten can now try to replace
as many branches as possible with shorter versions.
Finally, the function header is constructed and the body is emitted via emit.
.LP
msp emits the shortest possible code sequence to modify the stack pointer
by a stated amount.
This produces tricky but compact code.
.LP
shorten repeatedly computes the offset of each header, from the start of
the function body, so that it can then locate each code element (via pc)
for the sake of testing.
It then passes over the code to be emitted looking for:
conditional jumps over unconditional jumps, which can be turned around
to eliminate a jump;
and jumps to the next code in line (jumps over nothing).
It does this stuff until a pass occurs with no improvement (!better).
Note that the sizes are mostly nominal, since the 8080 has no short jumps.
.LP
visit recursively visits all code sequences which are statically accessible.
Jumps to jumps are eliminated,
as are jumps to code sequences that are otherwise
not reachable.
Code sequences are NAILED into place once a jump has been replaced
by a header chaining entry GHDR.
Conditional jumps require a recursive visit to the jump target,
to trace all possible paths.

.NM p2fmov.c move scalar data about
.FU
p2fmov.c is the code necessary to move a scalar operand
from one kind of addressable location to another.
All the code here indicates the great difficulty in writing an 8080
code generator, as it is equivalent to a simple move instruction
on saner computers.
.LP
Each of the force tables deals with moving a different type of operand,
possibly transforming it in the process:
dbmem moves a double to memory, using the canned sequence '\e4' expanded
by putasm;
dbstk moves a double onto the stack, using '\e5' in different ways;
deref performs one level of indirect address dereferencing;
intreg gets an int into a register;
intmem gets an int into memory;
intstk gets an int onto the stack;
lomem gets a long into memory;
lostk gets a long onto the stack;
ptmov moves a pointer about, without dereferencing it;
and reref computes a pointer which is a register plus displacement.
.LP
Aside from special tables such as deref and reref, most tables are
selected in force by scanning ftab.
The first entry says, for instance, that if you want a pointer in hl,
and hl is in the set of resources, and the type of the operand is
no larger than double (i.e. any type), then by all means use the table
ptmov.
The ptmov table will, in turn specify which entry to use to load the
pointer into hl (it must have a code of 01xx), depending upon where
it's coming from and what other registers it must make use of.
.LP
emit is ill placed; it is probably better off in p2main.c,
except for space considerations.
Similarly, the tables binops and optytab, and the functions opick, pick,
and twant, have found there way here for curious reasons that display
little residual logic.
.LP
binops indexes bintab to select the appropriate code table.
optytab, which is also indexed by binops, specifies whether equivalent
types are acceptable for the left operand (2) and/or the right (1);
thus LGRSH is a 1 because it matters whether its left operand is signed,
but not its right.
.LP
emit is straightforward, except for the cute way it interacts with putasm,
chread, and void to put out the right number of strings from the character
pool.
Watch the graves ` carefully.
.LP
fgen is the force table driver.
It gives back the source operand if it's volatile, then buys the desired
destination.
Setting up for the table expansion may require rescuing a pointer on
top of stack and placing it (or a copy of it) in hl;
this was an afterthought that notably simplified the tables.
The loop on table entries must succeed, since the tables are nominally
complete, but code generation may still be not possible because an
auxiliary register is called for that isn't available.
.LP
pick and opick find an appropriate table entry for a particular expression.
pick may be constrained to make an exact match of the left operand (match),
or to accept a widening match for both operands.
Note that for an exact match to work properly in opick, the operand must
be fixed, i.e. its f field must tell where it is located.

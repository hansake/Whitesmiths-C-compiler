.NM p2jump.c jump code
.FU
p2jump.c contains functions to generate jump logic code for expressions.
.LP
.LP
boolify computes a numeric boolean value, i.e. a zero or one
for expressions like y = a < 0, or the proper leg of a ?: operator.
Since there is no provision for jf to retry, boolify inists on
having the use of all function call volatile registers;
this is suboptimal at times, but guaranteed to succeed.
The numeric result is always developed in
a function return register.
.LP
cmpset sets up the compare operator,
returning which flavor of jump to perform and laundering the tree.
If both sides of the compare are constants, either an unconditional jump
or no jump is necessary.
Unsigned compares generate a special class of jumps, except when the
comparison is against zero,
in which case only signed tests work properly in all cases.
cmpset also changes (0 < x) to (x > 0), which is better optimized.
.LP
fnargs is called from fncall to generate stacking code for arguments.
It recurses down to the rightmost argument, then backs out stacking
arguments right to left and counting bytes.
fncall uses this byte count to clear the stack after the call.
fncall demands the set of volatile function call registers FNSET,
then sets up arguments and fixes the function address.
.LP
jc is called to produce code for a conditional jump.
It is called either from jcond, to produce a new code cell
and store its pointer in *qb,
or from jf/jt to add to a code sequence being produced for some
other reason.
This leads to somewhat messy code, since the uses differ markedly
at the lowest level.
jc first sets up the compare operator (cmpset)
to determine the flavor of jump required and to canonicalize the
subtree.
If we now have a NOP or a JUMP, it's all done.
For a conditional jump, with the right a constant zero,
the left side is fixed, in the hope that condition codes
will be set as a side effect of the fixing.
Barring that, the whole subtree is fixed, with the operator DCMP or DLESS at
the top; this had better set condition codes
or the compare tables in p2tab.c are bad.
.LP
jf and jt implement the jump false and jump true recursive network
necessary for logical operators (ANDAND, OROR, NOT).
This code is a variant of jf/jt in p1, which is equally hard to
understand but just as well proven in practice.
The simplest example is calling jf for the NOT operator,
which returns a jt call,
just as jt for a NOT returns jf.
.LP
setfn is widely used to establish which register to use to return
function values of various types.

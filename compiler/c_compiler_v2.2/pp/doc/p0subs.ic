.NM p0subs.c subroutines common to pp
.FU
p0subs.c contains subroutines used by parts of the preprocessor;
including define symbol table management, TLIST building, and
define expansion.
.LP
Many routines assume that token lists end in a PEOL token,
and hence that token list pointers are never null.
All hell breaks loose when this assertion fails to hold.
.LP
Definitions are installed in, looked up in, and deleted from
the symbol table using a hashing algorithm.
Using the hashtable signifigantly reduces execution time,
much of which is spent looking up identifiers.
A modicum of tuning has been made for the size of NHASH,
but little care has gone into the hashing algorithm.
The symbol table retains the logical appearance of a set
of stacks,
one per identifier,
while being implemented as a set of intertwined stacks,
one per hash key.
.LP
pargs is the only routine, outside the C library,
that knows the internal structure of FIO.
It must have an allocated INCL structure,
pointed at by pincl,
with space to write out the #define statements
that effectuate the -d arguments on the command line.
This is why main makes the first call to nxtfile,
and is careful to check it for success before calling predef.
.LP
The dirty trick noted in getfname is that buybuf will
copy one more character than it should from p->text,
which is later overwritten with a null character.
This is probably always safe,
since the source is always the input buffer in getln,
which has a newline somewhere downstream
of any identifier.
.LP
The expansion of previously defined identifiers
is rather complicated.
doexp is called to expand a list of tokens.
On finding a defined identifier, it converts the definition
text to a token list, by calling stotl.
It then calls getargs
to build an ALIST for the arguments declared in the defining
instance, and passes the token list and the argument list to dodef.
dodef patches the token list from the definition
into the token list of the original call.
It also matches
the ALIST of the definition to the arguments of the
original call, and patches those tokens into place.
The code:
.DS
	for (px = pa->astart; px != pa->aend; px = px->next)
		{
		*qb = buytl(px, r->next);
		qb = &(*qb)->next;
		}
.DE
.LP
is the heart of the matter.
.LP
stotl converts a character string into a list of tokens.
stotl asserts that the token list will always end with
the end of line token (PEOL).
Other tokens created are PNUM, PIDENT,
PCHCON, PSTRING, and PPUNCT.
All whitespace is eliminated by stotl,
which puts the address of whitespace and the count of
whitespace characters into the token.

.NM p0eval.c evaluate #if expressions
.FU
p0eval.c contains functions for parsing and evaluating
#if expressions.
escape character and operator parsing functions are also
packaged in p0eval.c.
.LP
The eschars/escodes tables map escape sequences into ASCII codes.
For example, '\eb' maps to ASCII 010.
.LP
The ipri/opri tables map operators valid in #if expressions into
priorities.
The higher the mapped priority, the stronger the operator
binds in extail.
.LP
Remember that the prename fields of PRETAB must be in sorted order.
.LP
doesc, escape character processing, is passed
the complete lexeme, including quotes (e.g. '\eb').
It must process at least two characters, and callers of doesc will receive
a buffer containing the quotes as well as the character string,
as well as a matching count.
.LP
dopunct tries to match the longest defined punctuation string.
.LP
eval calls expr, which returns the first TLIST which cannot be parsed.
If that TLIST is not end of line (PEOL)
something is wrong with the #if expression.
.LP
Parsing goes something like this:
.IP "expr -"
gets a term (exterm) followed by an optional operator/tail
pair (exop/extail).
.IP "extail -"
puts term/binop pairs on the current expression,
either recursing on itself or evaluating the
previous expr-binop-term, this depending on operator precedence.
extail returns the next TLIST when no more terms are available.
The expression evaluation is done in long throughout.
.IP "exterm -"
accepts PNUM's, PCHCON's, parenthesized exprs,
or the unops, LMINUS, LNOT, LCOMP, LPLUS.

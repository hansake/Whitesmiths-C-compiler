.NM p0lex.c produce lexemes for p1
.FU
p0lex.c converts token lists used throughout pp into
the lexemes sent to p1, assuming -x has been set.
putls fans out to one of lexident, lexstring, lexchars,
lexnum, or lexpunct;
and lexnum calls lexint or lexfloat.
.LP
firnon, which finds the first non base digit,
will be called with a base of 10 or 16.
.LP
flaccum, which builds a floating number, is one of
the few places in the compiler to use floating point.
It uses _dtens[], which is a library array representing
the floating powers of ten.
.LP
lexchars builds an unsigned character, short, or long
constant into sbuf.
sbuf[0] and sbuf[n+1] are quotes;
sbuf[1] through sbuf[n-3] contain the character constant.
.LP
lexfloat has been a source of problems,
since TLIST syntax bear little resemblance to C language floating constants.
lexfnxt is one such patch.
.LP
lexident tries to match the identifier
with a C keyword by scanning keytab (NKEYS has the number
of keywords); if it is a keyword, the associated keyword token
is passed on, otherwise it is an arbitary identifier, and the
identifier is passed on.
.LP
lexint puts out a long, short or character number.
Among other tests, to determine whether long or short or character,
lexint assigns the number to a long, a short, and a character.
If it assigns to a character unchanged, it is a character constant;
to a short unchanged, it is short; otherwise long.
A trailing 'L' or 'l' forces long.
.LP
putcode is a simple formatted output routine that accepts only the codes
.IP "c -"
put next arg as a character.
.IP "p -"
put next arg as null terminated string.
.IP "b -"
put next arg as buffer, length is argument following.
.IP "1, 2, 4, 8 -"
put next arg as buffer of specified length.
.LP
putls not only controls flow thoroughout p0lex,
but it also puts unadorned text if the -x flag is not used.
To allow pp to also act as the first pass of the UNIX V6 compliler,
the -6 flag instructs putls to put out one SOH for each #included newline
when writing unadorned text to a file.

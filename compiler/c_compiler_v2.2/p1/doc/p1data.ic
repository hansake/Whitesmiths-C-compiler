.NM p1data.c initialize a data declaration
.FU
p1data.c parses data declaraction initializers and passes
encoded commands to p2, thereby driving
p2 assembler data directives.
datinit drives dinit, which recurses on itself
for complex data types.
dinit in turn calls arinit for arrays and stinit for structures.
.LP
decflag is set true on entry to datinit so that variables
in data initializers will not be flagged as errors by typify
if they have not been entered into the symbol table.
.LP
parsing data initializers is fraught with peril
since curly brackets are optional around initializer
sublists for complex data types.
For example:
.DS
	int a[2, 2] {1, 2, 3, 4};

	int a[2, 2] {{1, 2}, 3, 4};

	int a[2, 2] {{1, 2}, {3, 4}};
.DE
.LP
all should have the same meaning.
What this means is that the datinit/dinit logic is
fragile, and any changes to either routine
will surely break the whole thing.
The key to understanding this logic is the list
argument passed to dinit.
dinit and its subordinates, arinit and stinit,
will try to match a declaration with each initializer.
If, rather than an initializer expression, the next token
is a left curly bracket, list is YES, and dinit
recognizes that it is now dealing with a sublist, and in
addition, a right curly bracket will be needed on exit.
.LP
datinit also checks for multiple initializations
of externals or statics by changing the
storage class from LEXTERN or LSTATIC to DEXTERN or DSTATIC.
The next reference, with initialization,
will produce an error message.
.LP
The initialization of bit fields is likewise tricky and has

been fraught with bugs.
The problem lies in determining when to continue packing a given int
and when to go on to the next initializer.
.LP
p1data.c drives the following p1puts.c functions:
.DS
	pdata, pint, paddr, pfloat, pspace;
.DE

.NM pifunc.c function initialize
.FU
p1func.c does the job of initializing function bodies.
.LP
The resources used at allocation time consist of regset,
autoff, argstart, and autstart.
Regset is initialized to those registers which may be
allocated by the programmer;
usually called r2, r3, r4.
p1 passes the current regset information to p2 at judicious intervals.
autoff is the current auto offset, also passed to p2.
.LP
The return, rterm, is used to build an operand
of the correct return type for the current procedure.
rterm is built in fninit and used in dostat.
rettab is a table
which maps basic types into allocatable C return types.
.LP
Autos are initialized in autinit.
First, the current state of register allocation and auto offset are
sent to p2.
Then a move instruction is generated,
since initialization of autos or registers require an inline move.
.LP
fninit parses a function initializer,
in particular that part of the function not including the
block body.
The flag defined,
which indicates whether the function is initialized,
(i.e. has a statement body),
is set to NO;
the table of argument declarations is assigned to lcltab;
and the symbol table is saved in symsave.
Then, argument redeclarations are parsed by first
calling gscty and then gdecl.
If there are any redeclarations,
the function is considered defined.
If either the argument is nonexistent
or the redeclaration has occurred twice,
it is in error.
If the function has defined
set, it must have a body,
or if it is defined it must
have a body.
Defined functions which have been previously
defined are flagged as errors.
As in data initializers,
LEXTERN and LSTATIC are set to DEXTERN
and DSTATIC respectively, to indicate
that the function is defined.
.LP
Next, the return term for the function is built.
This terms type must be scalar
and the correct register is picked from rettab.
Each of the arguments, in lcltab,
is given proper argument types,
and offsets and register arguments are set up by
passing a move command to p2,
moving from the stack to the register.
The lcltab is put into the symbol table and doblock
then processes function bodies.
.LP
Any GOTO for which no label exists after the block
has been processed is flagged as an error;
the sc field is filled in by doblock
when labels are known, so that the lack thereof
is considered an error.
Finally, in perc, symbols which are extern inside
of function bodies are percolated to the general
symbol table, and the symbol
table is restored.
.LP
doblock parses curly bracketed blocks by parsing
internal data declarations and their
initializers,
and by calling dostat repeatedly to parse statement
bodies.
The current allocatable register set, auto offset,
and symbol table top are saved.
Then auto, register, extern, static, or typedef
declarations are parsed by calling gscty and gdecl
until no further declarations are encountered.
If either the register set or the auto offset
has changed, p2 is informed.
For each declaration, autinit is called to
parse and process initializations.
And finally, dostat is called until
right curly bracket or end-of-file
is encountered.
.LP
dostat parses C statements and passes
commands to p2.
Since dostat will recurse on itself a great deal,
every effort is made to reduce auto usage
to prevent stack overflow on a small machine.
The first job dostat has is to parse cases,
case defaults, or labels,
until either multiple cases or labels are exhausted
(default breaks).
Cases are added to the casetab;
defaults are communicated to p2;
and labels are added to lbltab,
a storage class is assigned, and the
created label is sent to p2.
Then for each statement,
parsing is done, using:
.DS
	1. gelist, gtest, and gexpr to get expressions.
	2. need or gtok to get tokens.
	3. dostat to parse sub-statements.
	4. pjump, pjf, and pjt to process jumps.
	5. pvoid, pmove, and pswitch to pass expresions
		or commands to p2.
.DE
.LP
The current break and continue statement labels
are kept in brk and cont;
the current statement top, middle, and
bottem labels are kept in top, mid, bot.
GOTO statements may be called upon to go to an as yet
unseen label;
if so, a label is bought and put into the label table,
and the jump is generated.
If said label is never seen,
fninit will flag an error;
since no sc field will have been set.
switch statements first put switch header code;
then parse the enclosed block;
and then put the table of labels and cases
built by case processing.
The parsing of a statements can be illustrated
using the WHILE as example:
.DS
	case LWHILE:
		top = plabel(crs());
		bot = pjf(gtest(NO), crs(), 0);
		dostat(bot, top);
		pjump(top, bot);

	this generates:
		top:
			compute the (expression)
			jump false to bot
			do the statement body, bot is the break label
					and top is the continue label
			jump to top
		bot:
.DE

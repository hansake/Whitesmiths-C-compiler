.NM int2.h header file for C p2
.FU
int2.h contains structures and constants used only
by C p2 for the 8080.
.IP "TYPES -"
other than the standard scalar types, includes
LABEL for binary encoded label numbers
and LEX for encoded lexemes such as operators.
.IP "REGISTERS -"
are contrived to be highly compatible with the codes input from p1.
The Rx represent in-core quasi-registers, HL and BC are the obvious
hardware registers, TS represents the top of stack, and RPS indicates
a pointer on the stack.
.IP "PARAMETERS -"
are those parameters use by code emission.
LENNAME is just the length of internally stored names;
all eight characters are significant to A-Natural, but only the first seven
to ld80.
The triplet ISTEXT, ISLITS, and ISDATA are used to communicate code
section changes to csect; their values are magically related to the x flag.
Four sizes are defined for the branch shortener:
JCSIZE for conditional jumps,
JMPSIZE for unconditional jumps,
RETSIZE for returns,
and SWTSIZE for switch entry code.
The shortener and code emitter use the flags:
ISCASE for code sequences beginning with a case label, which must
always be emitted;
VISITED for code sequences known to be reachable;
NAILED for code sequences whose order of output has been nailed down
by visit;
and TOEMIT for code that will definitely be emitted.
.IP "CREATED CODES -"
are those operators which arise in p2.
These include
code sequences GCODE,
entries that are made into no-operations GNOP,
links to other labelled sequences GHDR,
and the unsigned long jumps GLOW and GHIS.
.IP "INDEX CODES -"
are the legitimate values of the idx field,
which describes 8080 register usage.
XBC, XDE, XHL, and XSP are the hardware registers,
X0 through X4 are the in-memory quasi-registers,
and XP0 and XP1 are pointers in X0 and X1, respectively.
The latter are one of several kludges centering around the volatility
design flaw.
.IP "WANT -"
attributes indicate in what resource we want or in
what resource we have gotten an operand.
This is central to the fix, force code generation
strategy, as operands are forced into states or resources
where progress can be made in code generation.
WNULL is passed down to indicate that the result is to be discarded,
liberating resources;
WSTACK requests or reports and operand on the stack;
WBC requests or reports an operand in bc;
WHL requests or reports an operand in hl;
WVMEM requests or reports an operand in volatile memory, i.e. the
quasi-registers;
WPBC requests or reports an operand pointed at by bc;
WPHL requests or reports an operand pointed at by hl;
WPSTK requests or reports an operand pointed at by a pointer on top of stack;
WMEM requests or reports an operand in memory;
and WTERM requests or reports an operand that has been computed, but
is not necessarily within reach.
The set of all resources that can hold a pointer is PTRSET,
whole those resources that might hold a volatile are summarized by VOLSET.
Sadly, the operative verb is "might", not "must".
.IP "GOT -"
is a noncohesive set of attributes indicating what resource
we have gotten or what side effect we have propagated when
generating code for an operand.
These bits are used in conjunction
with and are passed around with the WANTs.
GRVOL is passed down through getsop to binop to restore volatility to
a right operand lost through unfixing;
GZSET is passed up from gen when the Z condition code is properly set
by a code sequence;
GNSET is passed up from gen when the N and C condition codes are properly set
by a code sequence;
GJUNK is passed down to signal that the operand is to be junked when used,
liberating its resources;
GVOL is set for an allocated volatile resource;
and GNOCODE is passed down to prevent a two-stage move from generating
widening code for the destination operand.
.IP "ADDR -"
describes the components of a general compiler address:
ty is the type,
nm is the name,
bias is the offset in bytes,
idx is the index register used,
and refs is the refcount.
.IP "EXPR -"
is the structure which describes a term in the expression tree.
next is the next term allocated in the current
expression tree;
op is the operation code;
got are the curent WANT and GOT attributes;
f is the fixed ADDR structure, used after the term has
been fixed in place for code generation;
and e is a union of:
an ADDR v for terms, or
a set of operator attributes o, including its result type ty and pointers
to up to three operand EXPRs, left, right, and mid (?: only).
.IP "CODE -"
is the linked list of code segments used in shortening
and visiting entries:
next points to the next code entry in the sequence;
inst is the entry type, such as
GCODE, GJUMP, GRET, GSWITCH, etc.;
c is a union of:
lbl for jump labels,
hdr for chained headers,
and choff for the character pool offsets of code sequences;
and size is the number of bytes represented by the code entry.
Since the 8080 has only one size branch instruction,
size entries are maintained to sufficient accuracy only to detect
branches to branches, etc.
.IP "HEADER -"
is the head of a label headed group of code:
next is the next HEADER entry;
first is the top of the corresponding code sequence;
label is the label number for the header;
offset is the number of bytes from top of function;
nrefs is the number of other places in the
code which reference this header;
flags holds ISCASE, VISITED, TOEMIT, and NAILED;
and lineno is the source code line number passed through from p1.
.IP "FTAB -"
is the structure of a force table entry, i.e. a table used in fmov.c
to optimize various interregister moves for force.
fwant is the set of WANTs addressed by the table entry,
fset is the set of additional resources needed to use the table entry,
fty is the maximum type supported by the table,
and ftab points at the corresponding table of strings that
describe possible move strategies.
